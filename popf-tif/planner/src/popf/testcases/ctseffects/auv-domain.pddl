(define (domain AUV)
(:requirements :typing :durative-actions :fluents :duration-inequalities)
(:types auv ship waypoint gulper camera objective)

(:predicates (at ?x - auv ?w - waypoint)
             (is-ship ?w - waypoint)
             (can_traverse ?x - waypoint ?y - waypoint)
             (equipped_with_gulper ?v - auv)
             (equipped_for_imaging ?v - auv)
	     (has_torch ?v - auv)
             (empty ?g - gulper)
	     (has_gulper ?v - auv)
             (have_water_sample ?v - auv ?w - waypoint)
             (full ?g - gulper)
             (calibrated ?c - camera ?v - auv)
             (supports ?c - camera ?m - mode)
             (available ?v - auv)
             (have_image ?v - auv ?o - objective)
             (communicated_image_data ?o - objective)
             (at_water_sample ?w - waypoint)
             (visible_from ?o - objective ?w - waypoint)
	     (visible_from_ship ?o - objective ?s - ship)
             (on_board_camera ?i - camera ?v - auv)
	     (on_board_torch ?t - torch ?v - auv)
	     (on_board_gulper ?g - gulper ?v - auv)
             (channel_free)
             (on ?t - torch)
	     (off ?t - torch)
	     (on_light ?s - ship)
	     (off_light ?s - ship)	
	     (cantrickle ?r - rover)
	     (has_light ?s - ship)
	     (free ?w - waypoint)
	     (distance-from ?v - auv ? o - objective)
	     (at_surface ?w - waypoint)
	     (localised)
             (calibration_target ?i - camera ?o - objective)

)
(:functions (energy ?v - auv) (recharge-rate ?v - auv) (distance ?x - waypoint ?y - waypoint) (light-level ?o - objective) (drift-rate) (exposure ?v - auv ?o - objective) (distance-from ?v - auv ?o - objective))

(:durative-action navigate
:parameters (?v - auv ?y - waypoint ?z - waypoint)
:duration (= ?duration (distance ?y ?z))
:condition (and (over all (can_traverse ?y ?z)) 
		(at start (available ?v)) 
		(at start (at ?v ?y))  
		(over all (>= (energy ?v) 0))
		(at end (free ?z))
            )
:effect (and (decrease (energy ?v) (* #t 5))
              (at start (not (at ?v ?y)))
	      (at start (free ?y))
	      (at start (not (available ?v)))	
	      (at end (available ?v))
              (at end (at ?v ?z))
	      (at end (not (free ?z)))
	)
)

(:durative-action localise_at_waypoint
:parameters (?v - auv ?w - waypoint ?o - objective)
:duration (= ?duration 5)
:condition (and (over all (at ?v ?w)) 
		(at start (available ?v)) 
		(over all (>= (energy ?v) 0))
                (over all (visible_from ?o ?w)) 
            )
:effect (and (decrease (energy ?v) (* #t 5))
              (at start (not (available ?v)))
	      (at end (available ?v))
	      (at end (assign (distance-from ?v ?o) 0))
	      ;(at end (localised))
	)
)


(:durative-action recharge
:parameters (?x - auv ?w - waypoint)
:duration (<= ?duration (/ (- 1000 (energy ?x)) (recharge-rate ?x)))
:condition (and (at start (at ?x ?w)) 
		(at start (available ?x))
		(over all (at ?x ?w)) (at start (is-ship ?w))
                (at start (<= (energy ?x) 1000))
	   )
:effect (and 
		(at start (not (available ?x)))
		(at end (increase (energy ?x) (* ?duration (recharge-rate ?x))))
		(at end (available ?x))
	)
)


(:durative-action sample_water
:parameters (?v - auv ?g - gulper ?w - waypoint)
:duration (= ?duration 10)
:condition (and 
		(over all (at ?v ?w)) 
		(at start (at ?v ?w)) 
		(at start (at_water_sample ?w)) 
		(at start (has_gulper ?v)) 
		(at start (on_board_gulper ?g ?v)) 
		(at start (empty ?g))
		(at start (available ?v))
 		(over all (>= (energy ?v) 0))
           )
:effect (and 
		(at start (not (empty ?g)))
		(at start (not (available ?v)))  
		(at end (full ?g)) 
		(at end (available ?v)) 
		(decrease (energy ?v) (* #t 3))
		(at end (have_water_sample ?v ?w)) 
		(at end (not (at_water_sample ?w)))
        )
)



(:durative-action calibrate
 :parameters (?v - auv ?c - camera ?w - waypoint ?o - objective)
 :duration (= ?duration 5)
 :condition (and 
		(at start (equipped_for_imaging ?v)) 
		(at start (>= (energy ?v) 20)) 
		(at start (calibration_target ?c ?o)) 
		(over all (at ?v ?w)) 
		(at start (visible_from ?o ?w)) 
		(at start (on_board_camera ?c ?v))
 		(over all (>= (energy ?v) 0))
            )
 :effect (and 
		(at end (calibrated ?c ?v)) 
		(at start (decrease (energy ?v) 20))
	)
)


(:durative-action shine_torch
:parameters (?v - auv ?w - waypoint ?o - objective ?t - torch)
:duration (<= ?duration (/1000 (drift-rate)))
:condition (and 
		(over all (visible_from ?o ?w)) 
		(at start (off ?t)) 
		(at start (on_board_torch ?t ?v))
		(over all (at ?v ?w))  
		(over all (>= (energy ?v) 0))
		(at start (available ?v))
            )
:effect (and 
	      (decrease (energy ?v) (* #t 20))
          (at start (not (off ?t)))
	      (at end (off ?t))
	      (at start (not (available ?v)))
	      (at end (available ?v))
	      (at end (not (on ?t)))
          (at start (on ?t))
	      (at start (increase (light-level ?o) 1000))
	      (decrease (light-level ?o) (* #t (drift-rate)))
	      ;(at end (decrease (light-level ?o) (* (- (/ 1000 (drift-rate)) ?duration) (drift-rate))))
          (at end (decrease (light-level ?o) (- 1000 (* (drift-rate) ?duration))))
        )
)

(:durative-action shine_ship_light
:parameters (?s - ship ?o - objective )
:duration (<= ?duration 40)
:condition (and (over all (visible_from_ship ?o ?s)) 
		(at start (off_light ?s)) 
            )
:effect (and 
              (at start (not (off_light ?s)))
              (at end (off_light ?s))
	      (at end (not (on_light ?s)))
              (at start (on_light ?s))
	      (at start (increase (light-level ?o) 1000))
	      (at end (decrease (light-level ?o) 1000))
        )
)


;(:durative-action take_image
; :parameters (?v - auv ?w - waypoint ?o - objective ?c - camera)
; :duration (= ?duration 17)
; :condition (and ;(over all (calibrated ?c ?v))
;		 ;(over all (>= (light-level ?o) 500))
;		 (at start (<= (light-level ?o) 1000))
;		 (at start (>= (light-level ?o) 800))
 ;                (at start (on_board_camera ?c ?v))
;                 (over all (equipped_for_imaging ?v))
;		 (at start (available ?v))
 ;                (over all (visible_from ?o ?w))
  ;               (over all (at ?v ?w))
   ;              (over all (>= (energy ?v) 0))
	;	 (at end (>= (exposure ?v ?o) 1500))
	;	 (over all (<= (distance-from ?v ?o) 20))
	;	;(at start (localised))
     ;       )
; :effect (and 
;		(at start (not (available ?v)))
;		(at end (available ?v))
;		(decrease (energy ?v) (* #t 20))
;		(at start (assign (exposure ?v ?o) 0))
;		;(increase (exposure ?v ?o) (* #t (light-level ?o)) )
;		(increase (exposure ?v ?o) (* #t 305) )
;		(increase (distance-from ?v ?o) (* #t 0.5))
;		(at end (assign (exposure ?v ?o) 0))
;		(at end (have_image ?v ?o))
;		(at end (not (calibrated ?c ?v)))
;		;(when (and (at end (>= (exposure ?v ?o) 1500)) (<= (distance=from ?v ?o) 20) (have_image ?v ?o)))
 ;       )
;)

(:durative-action take_image_med
 :parameters (?v - auv ?w - waypoint ?o - objective ?c - camera)
 :duration (= ?duration 23)
 :condition (and ;(over all (calibrated ?c ?v))
         ;(over all (>= (light-level ?o) 500))
         (at start (<= (light-level ?o) 800))
         (at start (>= (light-level ?o) 600))
                 (at start (on_board_camera ?c ?v))
                 (over all (equipped_for_imaging ?v))
         (at start (available ?v))
                 (over all (visible_from ?o ?w))
                 (over all (at ?v ?w))
                 (over all (>= (energy ?v) 0))
         (at end (>= (exposure ?v ?o) 1500))
         (over all (<= (distance-from ?v ?o) 20))
        ;(at start (localised))
            )
 :effect (and 
        (at start (not (available ?v)))
        (at end (available ?v))
        (decrease (energy ?v) (* #t 20))
        (at start (assign (exposure ?v ?o) 0))
        ;(increase (exposure ?v ?o) (* #t (light-level ?o)) )
        (increase (exposure ?v ?o) (* #t 305) )
        (increase (distance-from ?v ?o) (* #t 0.5))
        (at end (assign (exposure ?v ?o) 0))
        (at end (have_image ?v ?o))
        (at end (not (calibrated ?c ?v)))
        ;(when (and (at end (>= (exposure ?v ?o) 1500)) (<= (distance=from ?v ?o) 20) (have_image ?v ?o)))
        )
)

;(:durative-action take_image_far
; :parameters (?v - auv ?w - waypoint ?o - objective ?c - camera)
; :duration (= ?duration 32)
; :condition (and ;(over all (calibrated ?c ?v))
;         ;(over all (<= (light-level ?o) 499))
;         (at start (>= (light-level ?o) 400))
;         (at start (>= (light-level ?o) 500))
;                 (at start (on_board_camera ?c ?v))
;                 (over all (equipped_for_imaging ?v))
;         (at start (available ?v))
;                 (over all (visible_from ?o ?w))
;                 (over all (at ?v ?w))
;                 (over all (>= (energy ?v) 0))
;         (at end (>= (exposure ?v ?o) 1500))
;         (over all (<= (distance-from ?v ?o) 20))
;        ;(at start (localised))
;            )
; :effect (and 
;        (at start (not (available ?v)))
;        (at end (available ?v))
;        (decrease (energy ?v) (* #t 20))
;        (at start (assign (exposure ?v ?o) 0))
;        ;(increase (exposure ?v ?o) (* #t (light-level ?o)) )
;        (increase (exposure ?v ?o) (* #t 305) )
;        (increase (distance-from ?v ?o) (* #t 0.5))
;        (at end (assign (exposure ?v ?o) 0))
;        (at end (have_image ?v ?o))
;        (at end (not (calibrated ?c ?v)))
;        ;(when (and (at end (>= (exposure ?v ?o) 1500)) (<= (distance=from ?v ?o) 20) (have_image ?v ?o)))
;        )
;)



(:durative-action communicate_image_data
 :parameters (?v - auv ?o - objective ?w - waypoint)
 :duration (= ?duration 15)
 :condition (and 
		(over all (at ?v ?w)) 
		(over all (at_surface ?w)) 
		(at start (have_image ?v ?o))
		(at start (available ?v)) 
		(at start (channel_free)) 
		(over all (>= (energy ?v) 0))
            )
 :effect (and 
		(at start (not (available ?v))) 
		(at start (not (channel_free)))
		(at end (channel_free)) 
		(at end (communicated_image_data ?o)) 
		(at end (available ?v))
		(decrease (energy ?v) (* #t 4))
          )
)

)
